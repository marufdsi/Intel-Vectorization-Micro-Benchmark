Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/3=33.3%] TestVector.cpp(23,11)

===========================================================================

Begin optimization report for: checkVector(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (checkVector(int)) [2/3=66.7%] TestVector.cpp(15,26)
  -> EXTERN: (16,12) _vla_alloc(long)
  -> EXTERN: (16,18) _vla_alloc(long)
  -> EXTERN: (21,12) _vla_free(void *, long)
  -> EXTERN: (21,12) _vla_free(void *, long)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at TestVector.cpp(17,5)
   remark #15388: vectorization support: reference A has aligned access   [ TestVector.cpp(18,9) ]
   remark #15388: vectorization support: reference B has aligned access   [ TestVector.cpp(19,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 2.290 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at TestVector.cpp(17,5)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference A has aligned access   [ TestVector.cpp(18,9) ]
   remark #15388: vectorization support: reference B has aligned access   [ TestVector.cpp(19,9) ]
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
LOOP END
===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [3/3=100.0%] <compiler generated>
  -> EXTERN: /usr/include/c++/4.8.5/iostream:(74,25) __cxa_atexit()
  -> EXTERN: /usr/include/c++/4.8.5/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)

===========================================================================
